FROM python:3.11-slim

LABEL maintainer="Sentinel Project Team"
LABEL description="Sentinel Democracy Watchdog System - Dashboard Service"

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r sentinel && useradd -r -g sentinel sentinel

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional dependencies
RUN pip install --no-cache-dir \
    flask==3.0.2 \
    flask-cors==4.0.0 \
    flask-sqlalchemy==3.1.1 \
    flask-login==0.6.3 \
    flask-migrate==4.0.5 \
    bcrypt==4.0.1 \
    passlib==1.7.4 \
    gunicorn==21.2.0 \
    psycopg2-binary==2.9.9 \
    requests==2.31.0

# Copy application code
COPY . .

# Create necessary directories and set permissions
RUN mkdir -p /app/data /app/logs /app/instance && \
    chown -R sentinel:sentinel /app && \
    chmod -R 755 /app && \
    chmod 777 /app/logs

# Set Python path to include the application root
ENV PYTHONPATH=/app:${PYTHONPATH}
ENV FLASK_APP=interface.dashboard:create_app
ENV FLASK_ENV=development
ENV FLASK_DEBUG=1
ENV JWT_SECRET_KEY=your-secret-key

# Create startup script
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'echo "Waiting for PostgreSQL..."' >> /app/start.sh && \
    echo 'while ! nc -z sentinel-postgres 5432; do' >> /app/start.sh && \
    echo '  sleep 1' >> /app/start.sh && \
    echo 'done' >> /app/start.sh && \
    echo 'echo "PostgreSQL is up"' >> /app/start.sh && \
    echo 'echo "Waiting for Redis..."' >> /app/start.sh && \
    echo 'while ! nc -z sentinel-redis 6379; do' >> /app/start.sh && \
    echo '  sleep 1' >> /app/start.sh && \
    echo 'done' >> /app/start.sh && \
    echo 'echo "Redis is up"' >> /app/start.sh && \
    echo 'echo "Running database migrations..."' >> /app/start.sh && \
    echo 'cd /app && alembic upgrade head' >> /app/start.sh && \
    echo 'echo "Creating admin user..."' >> /app/start.sh && \
    echo 'python scripts/create_admin.py admin admin@example.com admin' >> /app/start.sh && \
    echo 'echo "Starting dashboard service..."' >> /app/start.sh && \
    echo 'gunicorn --bind 0.0.0.0:5000 --workers 2 --timeout 120 --worker-class sync --worker-connections 1000 --max-requests 1000 --max-requests-jitter 50 --log-level debug --access-logfile - --error-logfile - "interface.dashboard:create_app()"' >> /app/start.sh && \
    chmod +x /app/start.sh

# Switch to non-root user
USER sentinel

# Expose port
EXPOSE 5000

# Command to run the application
CMD ["/app/start.sh"]